name: Cleanup Packages, Tags and Releases

on:
  workflow_dispatch:

jobs:
  cleanup:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: write

    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Clean packages
        run: |
          output=$(curl --location "https://api.github.com/graphql" \
            --header "Content-Type: application/json" \
            --header "Authorization: Bearer $GITHUB_TOKEN" \
            --data "{\"query\":\"query { repository(owner:\\\"owner-name\\\", name:\\\"Project-name\\\") { packages(first:100) { nodes { packageType name id versions(first:100) { nodes { id version readme } } } } }\"}")

          if [ $? -ne 0 ]; then
              echo "Error executing curl command to get packages: $output"
              exit 1
          fi

          echo "$output" | jq '.data.repository.packages.nodes[] | select(.name | startswith("deleted_") | not)'
          
          idsToDeletePackages=$(echo "$output" | jq -r '.data.repository.packages.nodes[] | .versions.nodes[] | .id')


          if [ -z "$idsToDeletePackages" ]; then
              echo "No versions to delete found."
              exit 0
          fi

          for idToDelete in $idsToDeletePackages
          do
              echo "Deleting version with ID $idToDelete"

              deleteOutput=$(curl --location "https://api.github.com/graphql" \
                --header "Accept: application/vnd.github.package-deletes-preview+json" \
                --header "Content-Type: application/json" \
                --header "Authorization: Bearer $GITHUB_TOKEN" \
                --data "{\"query\":\"mutation { deletePackageVersion(input: { packageVersionId: \\\"$idToDelete\\\" }) { success } }\"}")

              if [ $? -ne 0 ]; then
                  echo "Error executing curl command to delete version with ID $idToDelete: $deleteOutput"
              else
                  echo "Deleted version with ID $idToDelete: $deleteOutput"
              fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout with tags
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Delete all git tags
        run: |
          git tag | while read tag; do
            echo "Deleting tag: $tag"
            git push origin :refs/tags/$tag
          done

      - name: Delete all releases
        run: |
          gh release list -L 1000 | awk '{print $1}' | while read release; do
            echo "Deleting release: $release"
            gh release delete "$release" -y
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
